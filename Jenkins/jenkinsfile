pipeline {
    agent any
     tools{
        jdk 'jdk17'
        maven 'maven3'
    }
     parameters {
        choice(name: 'DEPLOY_ENV', choices: ['blue', 'green'], description: 'Choose which environment to deploy: Blue or Green')
        choice(name: 'DOCKER_TAG', choices: ['blue', 'green'], description: 'Choose the Docker image tag for the deployment')
        booleanParam(name: 'SWITCH_TRAFFIC', defaultValue: false, description: 'Switch traffic between Blue and Green')
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        TAG = "${params.DOCKER_TAG}"
    }
    stages {
        stage('Pull Code') {
            steps {
                git branch: 'main',credentialsId: 'git' , url: 'https://github.com/Achref-dot-afk/Production-Level-Blue-Green-Deployment.git'
            }
        }
        stage('Maven Compile') {
            steps {
                sh "mvn clean compile"
            }
        }
        stage('Maven Test') {
            steps{
                sh "mvn test -DskipTests=true"
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                  withSonarQubeEnv('sonar-server') {
                      sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Bankapp -Dsonar.projectName='Bankapp' -Dsonar.java.binaries=target/classes"
                }
             }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage('Maven build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        stage('Publish artifacts to nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t achref2h/bankapp:${TAG} ."
                       sh "docker push achref2h/bankapp:${TAG} "
                    }
                }
            }
        }
        stage('Trivy Docker Scan') {
            steps {
                sh "trivy image --format table -o docker.html achref2h/bankapp:${TAG}"
            }

          post {
            always {
                emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                    "Build Number: ${env.BUILD_NUMBER}<br/>" +
                    "URL: ${env.BUILD_URL}<br/>",
                to: 'achrefh1bli22@gmail.com',                           
                attachmentsPattern: 'fs.html'
        }
    }
  }
 }
}

